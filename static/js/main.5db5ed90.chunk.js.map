{"version":3,"sources":["containers/images/SVG/location_green.svg","containers/images/SVG/location_yellow.svg","containers/images/SVG/location_red.svg","containers/images/SVG/location.svg","containers/images/SVG/lookup.svg","containers/images/SVG/add.svg","containers/images/SVG/feedback.svg","containers/images/newMap.png","containers/images/SVG/location_black.svg","containers/images/SVG/info_black.svg","containers/images/SVG/heart_red.svg","containers/images/SVG/notification.svg","containers/images/SVG/notification_bullet.svg","containers/Menu.js","containers/Login.js","containers/SignUp.js","containers/NotFound.js","containers/Location.js","containers/DetailedPatientInfo.js","containers/PatientList.js","containers/AddPatient.js","containers/Feedback.js","containers/Test.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","handleMap","e","preventDefault","history","push","pathname","data","state","patients","handleList","bind","className","href","src","location","alt","lookup","add","feedback","Component","Login","useState","email","setEmail","password","setPassword","onSubmit","event","alert","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","value","onChange","target","Button","block","disabled","length","SignUp","NotFound","Location","heartRate","currentId","currentName","currentHeartRate","showPanel","panel","left","top","padding","handleSubmit","param","openPanel","setState","i","pid","firstName","lastName","this","getPatients","timer","setInterval","clearInterval","console","log","axios","get","then","response","result","count1","count2","count3","count4","toString","concat","heartrate","img","green","yellow","red","catch","error","mid","right","tempPatients","slice","map","patient","key","onClick","style","position","marginTop","marginBottom","width","height","heart_red","info_black","location_black","apiHeartRateList","DetailedPatientInfo","dobmonth","dobday","dobyear","heartRates","stressLevel","time","patientId","match","params","getHeartRate","undefined","info","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","title","display","text","fontSize","legend","PatientList","removePatient","myHeaders","Headers","append","raw","JSON","stringify","fetch","method","headers","redirect","window","reload","test","$test","id","AddPatient","gender","first","setFirst","middle","setMiddle","last","setLast","month","setMonth","day","setDay","year","setYear","phoneNumber","setNumber","sex","setSex","weight","setWeight","setHeight","fid","setFid","errors","isNaN","date","Date","middleName","start","body","colSpan","placeholder","country","Feedback","setFeedback","Test","Routes","path","exact","component","Home","DetaildPatientInfo","removed","App","patientsList","alertMessageList","name","showAlert","showOptions","goToPatient","removeAlert","prevState","filter","message","minWidth","Navbar","fluid","collapseOnSelect","Toggle","aria-controls","Header","Brand","to","NavDropdown","notification","noCaret","Bullet","Dropdown","drop","float","Badge","variant","Collapse","Nav","pullRight","NavItem","withRouter","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5db5ed90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location_green.766c7d08.svg\";","module.exports = __webpack_public_path__ + \"static/media/location_yellow.13fd6466.svg\";","module.exports = __webpack_public_path__ + \"static/media/location_red.cfc79678.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.336e7581.svg\";","module.exports = __webpack_public_path__ + \"static/media/lookup.1efee98c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.39e3237e.svg\";","module.exports = __webpack_public_path__ + \"static/media/feedback.be5e8c4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/newMap.9fba6656.png\";","module.exports = __webpack_public_path__ + \"static/media/location_black.f7e97252.svg\";","module.exports = __webpack_public_path__ + \"static/media/info_black.50fa88dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart_red.454bfc3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/notification.3db53ad5.svg\";","module.exports = __webpack_public_path__ + \"static/media/notification_bullet.9ec7251d.svg\";","import React, { Component } from \"react\";\r\nimport \"./Menu.css\";\r\nimport location from \"./images/SVG/location.svg\";\r\nimport lookup from \"./images/SVG/lookup.svg\";\r\nimport add from \"./images/SVG/add.svg\";\r\nimport feedback from \"./images/SVG/feedback.svg\";\r\n\r\nclass Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMap = this.handleMap.bind(this);\r\n    this.handleList = this.handleList.bind(this);\r\n  }\r\n\r\n  //function that transfers patient data to \"Location\" page\r\n  handleMap = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: \"./location\",\r\n      data: this.state.patients,\r\n    });\r\n  };\r\n\r\n  //function that transfers patient data to \"PatientList\" page\r\n  handleList = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: \"./patient_list\",\r\n      data: this.state.patients,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Menu\">\r\n        <table className=\"menu\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                {/* <a href=\"\" onClick={this.handleMap}> */}\r\n                <a href=\"./location\">\r\n                  <img className=\"left\" src={location} alt=\"Location logo\" />\r\n                </a>\r\n              </td>\r\n              <td>\r\n                {/* <a href=\"\" onClick={this.handleList}> */}\r\n                <a href=\"./patient_list\">\r\n                  <img className=\"right\" src={lookup} alt=\"Lookup logo\" />\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <a href=\"./add_patient\">\r\n                  <img className=\"left\" src={add} alt=\"Add logo\" />\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <a href=\"./feedback\">\r\n                  <img className=\"right\" src={feedback} alt=\"Feedback logo\" />\r\n                </a>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Menu;\r\n","import React, { useState } from \"react\";\r\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport \"./Login.css\";\r\n\r\nexport default function Login(props) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  function validateForm() {\r\n    return email.length > 0 && password.length > 0;\r\n  }\r\n\r\n  //validate login information. If the login information is not valid, prompt error message.\r\n  //Dante said we just need one generic login id&pw for now, so I just set it to id: \"test@gmail.com\" and pw: 0000\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (email === \"test@gmail.com\" && password === \"0000\")\r\n      props.history.push(\"/menu\");\r\n    else alert(\"Not a valid login information. Pleaser try again.\");\r\n    /**try {\r\n      await Auth.signIn(email, password);\r\n      props.userHasAuthenticated(true);\r\n      props.history.push(\"/\");\r\n    } catch (e) {\r\n      alert(e.message);\r\n    }**/\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1 className=\"loginHeader\">UCI Medical Center Radiation Oncology</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormGroup controlId=\"email\" bsSize=\"large\">\r\n          <ControlLabel>Email</ControlLabel>\r\n          <FormControl\r\n            autoFocus\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"password\" bsSize=\"large\">\r\n          <ControlLabel>Password</ControlLabel>\r\n          <FormControl\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n          />\r\n        </FormGroup>\r\n        <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\r\n          Login\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport \"./SignUp.css\";\r\n\r\nexport default function SignUp(props) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  function validateForm() {\r\n    /* Checks that email and password are not empty */\r\n    return email.length > 0 && password.length > 0;\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    /* If user successfuly signs up, prompts the message and redirect the user to login page */\r\n    event.preventDefault();\r\n    alert(\"You are successfully signed up. Please log in to use the website\");\r\n    props.history.push(\"/login\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <form onSubmit={handleSubmit}>\r\n        <FormGroup controlId=\"email\" bsSize=\"large\">\r\n          <ControlLabel>Email</ControlLabel>\r\n          <FormControl\r\n            autoFocus\r\n            type=\"email\"\r\n            value={email}\r\n            /* save user input email to the variable email */\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"password\" bsSize=\"large\">\r\n          <ControlLabel>Password</ControlLabel>\r\n          <FormControl\r\n            value={password}\r\n            /* save user input password to the variable password */\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n          />\r\n        </FormGroup>\r\n        {/* if the user input is no valid, diable the submit button */}\r\n        <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\r\n          Sign Up\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./NotFound.css\";\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h3>Sorry, page not found!</h3>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Location.css\";\r\n// import map from \"./images/map_clear.jpeg\";\r\nimport map from \"./images/newMap.png\";\r\nimport green from \"./images/SVG/location_green.svg\";\r\nimport yellow from \"./images/SVG/location_yellow.svg\";\r\nimport red from \"./images/SVG/location_red.svg\";\r\nimport location_black from \"./images/SVG/location_black.svg\";\r\nimport info_black from \"./images/SVG/info_black.svg\";\r\nimport heart_red from \"./images/SVG/heart_red.svg\";\r\n\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardText,\r\n  MDBCardHeader,\r\n  MDBContainer,\r\n} from \"mdbreact\";\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst api = \"https://lachesisfitbit.com/api/getbyid=1\";\r\nconst heartRateApi = \"https://lachesisfitbit.com/api/recentFitbit=\";\r\nconst locationApi = \"https://lachesisfitbit.com/api/getbylid=\";\r\nconst apiAll = \"https://lachesisfitbit.com/api/getAllPatients\";\r\nconst apiActive = \"https://lachesisfitbit.com/api/getActivePatients\";\r\nconst apiHeartRate = \"https://lachesisfitbit.com/api/getbyfid=2\";\r\nconst newLocationApi = \"https://lachesisfitbit.com/api/getRecentLocationByMid=\";\r\n\r\n// /getAllbyfid=1\r\n// /recentFitbit=1\r\n// /updateConnect\r\n// return class from binding is patients_fitbit connection\r\n// /getActivePatients\r\n\r\nclass Location extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    //this.openPanel = this.openPanel.bind(this);\r\n  }\r\n\r\n  //variable for list of patients\r\n  state = {\r\n    patients: [],\r\n    heartRate: [],\r\n    location: [],\r\n    currentId: \"\",\r\n    currentName: \"\",\r\n    currentHeartRate: 0,\r\n    showPanel: false,\r\n    panel: \"\",\r\n    //Room 1\r\n    // left: 52 + \"%\",\r\n    // top: 92 + \"%\",\r\n    // padding: 500 + \"%\",\r\n    //Room 2\r\n    left: 57 + \"%\",\r\n    top: 92 + \"%\",\r\n    padding: 500 + \"%\",\r\n  };\r\n\r\n  //function that retrieves data from backend server using RESTful API every time user opens this page\r\n  //The retrieved data is saved to the variable \"patients\"\r\n  componentDidMount() {\r\n    // proxyurl = window.$proxyurl;\r\n    // api = window.$api;\r\n    this.getPatients();\r\n    //5000\r\n    this.timer = setInterval(() => this.getPatients(), 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  }\r\n\r\n  getPatients() {\r\n    //fetch heartrate data from fitbit device 1, 2, 3\r\n    console.log(\"test interval\");\r\n    // for (let i = 1; i < 4; i++) {\r\n    //   axios\r\n    //     .get(heartRateApi + i.toString())\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n    //       console.log(this.state.heartRate);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    // }\r\n    //---------------------------------------------------------------------------------------------------------------\r\n    // axios\r\n    //   .get(heartRateApi + \"1\")\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ heartRate1: result });\r\n    //     console.log(\"pid 1 Heartrate:\" + this.state.heartRate1.heartrate);\r\n    //   })\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n    // axios\r\n    //   .get(heartRateApi + \"2\")\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ heartRate2: result });\r\n    //     console.log(\"pid 2 Heartrate:\" + this.state.heartRate2.heartrate);\r\n    //   })\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n    // axios\r\n    //   .get(heartRateApi + \"3\")\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ heartRate3: result });\r\n    //     console.log(\"pid 3 Heartrate:\" + this.state.heartRate3.heartrate);\r\n    //   })\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n    //---------------------------------------------------------------------------------------------------------------\r\n\r\n    //fetch lodation data from mobile phone 1, 2, 3\r\n    // for (let i = 1; i < 4; i++) {\r\n    //   axios\r\n    //     .get(locationApi + i.toString())\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ location: this.state.location.concat(result) });\r\n    //       console.log(this.state.location);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    // }\r\n    //---------------------------------------------------------------------------------------------------------------\r\n    //  axios\r\n    //     .get(locationApi + \"1\")\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ location1: result });\r\n    //       console.log(\"pid 1 location:\" + this.state.location1.location);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    //   axios\r\n    //     .get(locationApi + \"2\")\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ location2: result });\r\n    //       console.log(\"pid 2 location:\" + this.state.location2.location);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    //   axios\r\n    //     .get(locationApi + \"3\")\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ location3: result });\r\n    //       console.log(\"pid 3 location:\" + this.state.location3.location);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    //---------------------------------------------------------------------------------------------------------------\r\n\r\n    axios\r\n      .get(apiActive)\r\n      .then((response) => response.data)\r\n      .then((result) => {\r\n        this.setState({ patients: result });\r\n        console.log(\"patients\" + this.state.patients);\r\n        let count1 = 0;\r\n        let count2 = 0;\r\n        let count3 = 0;\r\n        let count4 = 0;\r\n        for (let i = 1; i <= this.state.patients.length; i++) {\r\n          axios\r\n            .get(heartRateApi + i.toString())\r\n            .then((response) => response.data)\r\n            .then((result) => {\r\n              console.log(result);\r\n              this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n              console.log(\"result\" + this.state.heartRate[i - 1].heartrate);\r\n              this.setState((state) => {\r\n                const patients = state.patients;\r\n                patients[i - 1].heartRate = this.state.heartRate[\r\n                  i - 1\r\n                ].heartrate;\r\n                if (patients[i - 1].heartRate <= 70)\r\n                  this.setState((state) => {\r\n                    const patients = state.patients;\r\n                    patients[i - 1].img = green;\r\n                    return {\r\n                      patients,\r\n                    };\r\n                  });\r\n                else if (patients[i - 1].heartRate <= 85)\r\n                  this.setState((state) => {\r\n                    const patients = state.patients;\r\n                    patients[i - 1].img = yellow;\r\n                    return {\r\n                      patients,\r\n                    };\r\n                  });\r\n                else if (patients[i - 1].heartRate >= 85)\r\n                  this.setState((state) => {\r\n                    const patients = state.patients;\r\n                    patients[i - 1].img = red;\r\n                    return {\r\n                      patients,\r\n                    };\r\n                  });\r\n                return {\r\n                  patients,\r\n                };\r\n              });\r\n              console.log(\"test\" + this.state.patients);\r\n            })\r\n\r\n            .catch((error) => console.log(\"error\", error));\r\n          console.log(\"mid: \" + this.state.patients[i - 1].mid.toString());\r\n          axios\r\n            .get(newLocationApi + this.state.patients[i - 1].mid.toString())\r\n            .then((response) => response.data)\r\n            .then((result) => {\r\n              console.log(result);\r\n              this.setState({ location: this.state.location.concat(result) });\r\n              console.log(\"result\" + this.state.location[i - 1].location);\r\n              this.setState((state) => {\r\n                const patients = state.patients;\r\n                patients[i - 1].location = this.state.location[i - 1].location;\r\n                if (patients[i - 1].location === \"RoomA\") {\r\n                  patients[i - 1].left = 56 + count1 * 2;\r\n                  patients[i - 1].right = 44;\r\n                  patients[i - 1].top = 110;\r\n                  count1++;\r\n                  // patients[i].bottom = 32;\r\n                  //145\r\n                }\r\n                if (patients[i - 1].location === \"RoomB\") {\r\n                  patients[i - 1].left = 61 + count2 * 2;\r\n                  patients[i - 1].right = 39;\r\n                  patients[i - 1].top = 110;\r\n                  count2++;\r\n                  // patients[i].bottom = 32;\r\n                }\r\n                if (patients[i - 1].location === \"RoomC\") {\r\n                  patients[i - 1].left = 56 + count3 * 2;\r\n                  patients[i - 1].right = 43;\r\n                  patients[i - 1].top = 90;\r\n                  count3++;\r\n                  // patients[i].bottom = 58;\r\n                }\r\n                if (patients[i - 1].location === \"Waiting\") {\r\n                  patients[i - 1].left = 33 + count4 * 2;\r\n                  patients[i - 1].right = 45;\r\n                  patients[i - 1].top = 87;\r\n                  count4++;\r\n                }\r\n                return {\r\n                  patients,\r\n                };\r\n              });\r\n            })\r\n\r\n            .catch((error) => console.log(\"error\", error));\r\n        }\r\n      })\r\n\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    //fetch patient list\r\n    // axios\r\n    //   .get(apiActive)\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ patients: result });\r\n    //     console.log(this.state.patients);\r\n    //     //for (let i = 0; i < this.state.patients.length; i++) {\r\n    //     this.state.patients[0].heartRate = this.state.heartRate1.heartrate;\r\n    //     this.state.patients[1].heartRate = this.state.heartRate2.heartrate;\r\n    //     this.state.patients[2].heartRate = this.state.heartRate3.heartrate;\r\n    //     this.state.patients[0].location = this.state.location1.location;\r\n    //     this.state.patients[1].location = this.state.location2.location;\r\n    //     this.state.patients[2].location = this.state.location3.location;\r\n    //     let count1 = 0;\r\n    //     let count2 = 0;\r\n    //     let count3 = 0;\r\n    //     let count4 = 0;\r\n    //     for (let i = 0; i < 3; i++) {\r\n    //       this.setState((state) => {\r\n    //         const patients = state.patients;\r\n    //         patients[i].stressLevel = 70;\r\n    //         patients[i].img = green;\r\n    //         if (patients[i].location === \"RoomA\") {\r\n    //           patients[i].left = 56 + count1 * 2;\r\n    //           patients[i].right = 44;\r\n    //           patients[i].top = 110;\r\n    //           count1++;\r\n    //           // patients[i].bottom = 32;\r\n    //           //145\r\n    //         }\r\n    //         if (patients[i].location === \"RoomB\") {\r\n    //           patients[i].left = 61 + count2 * 2;\r\n    //           patients[i].right = 39;\r\n    //           patients[i].top = 110;\r\n    //           count2++;\r\n    //           // patients[i].bottom = 32;\r\n    //         }\r\n    //         if (patients[i].location === \"RoomC\") {\r\n    //           patients[i].left = 56 + count3 * 2;\r\n    //           patients[i].right = 43;\r\n    //           patients[i].top = 90;\r\n    //           count3++;\r\n    //           // patients[i].bottom = 58;\r\n    //         }\r\n    //         if (patients[i].location === \"Waiting\") {\r\n    //           patients[i].left = 33 + count4 * 2;\r\n    //           patients[i].right = 45;\r\n    //           patients[i].top = 87;\r\n    //           count4++;\r\n    //           // patients[i].bottom = 58;\r\n    //         }\r\n\r\n    //         return {\r\n    //           patients,\r\n    //         };\r\n    //       });\r\n    //     }\r\n    //     console.log(this.state.patients);\r\n\r\n    //     //set the color/shape based on the stress level of the patients in the list\r\n    //     for (let i = 0; i < this.state.patients.length; i++) {\r\n    //       if (this.state.patients[i].heartRate <= 70)\r\n    //         this.setState((state) => {\r\n    //           const patients = state.patients;\r\n    //           patients[i].img = green;\r\n    //           return {\r\n    //             patients,\r\n    //           };\r\n    //         });\r\n    //       else if (this.state.patients[i].heartRate <= 85)\r\n    //         this.setState((state) => {\r\n    //           const patients = state.patients;\r\n    //           patients[i].img = yellow;\r\n    //           return {\r\n    //             patients,\r\n    //           };\r\n    //         });\r\n    //       else if (this.state.patients[i].heartRate >= 85)\r\n    //         this.setState((state) => {\r\n    //           const patients = state.patients;\r\n    //           patients[i].img = red;\r\n    //           return {\r\n    //             patients,\r\n    //           };\r\n    //         });\r\n    //     }\r\n    //   })\r\n    //   .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  //redirect the user to the \"DetailedPatientInfo\" page for the patient clicked, and pass patient id as parameter in url.\r\n  handleSubmit = (param) => (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: \"/detailed_patient_info/\" + param,\r\n      data: this.state.patients,\r\n    });\r\n  };\r\n\r\n  openPanel = (param) => (e) => {\r\n    e.preventDefault();\r\n    this.setState({ showPanel: true });\r\n    this.setState({ currentId: param });\r\n    for (let i = 0; i < this.state.patients.length; i++) {\r\n      if (this.state.patients[i].pid === param) {\r\n        this.setState({\r\n          currentName:\r\n            this.state.patients[i].firstName +\r\n            \" \" +\r\n            this.state.patients[i].lastName,\r\n        });\r\n        this.setState({\r\n          currentHeartRate: this.state.patients[i].heartRate,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const left = this.state.left;\r\n    const top = this.state.top;\r\n    const tempPatients = this.state.patients.slice(0, 3);\r\n    return (\r\n      <div className=\"Location\">\r\n        <h1 className=\"header\">Patient Location</h1>\r\n        <img src={map} alt=\"Map\" className=\"map\" />\r\n        <div className=\"dot\">\r\n          {tempPatients.map((patient) => (\r\n            <div\r\n              key={patient.pid}\r\n              className=\"patientLocation\"\r\n              onClick={this.openPanel(patient.pid)}\r\n            >\r\n              <p\r\n                className=\"heartRateText\"\r\n                style={{\r\n                  left: patient.left + \"%\",\r\n                  right: patient.right + \"%\",\r\n                  top: patient.top - 2 + \"%\",\r\n                  // bottom: patient.bottom + \"%\",\r\n                  position: \"absolute\",\r\n                }}\r\n              >\r\n                {patient.heartRate + \"bpm\"}\r\n              </p>\r\n              <p\r\n                style={{\r\n                  left: patient.left + \"%\",\r\n                  right: patient.right - 10 + \"%\",\r\n                  top: patient.top + \"%\",\r\n                  // bottom: patient.bottom + \"%\",\r\n\r\n                  position: \"absolute\",\r\n                }}\r\n              >\r\n                {patient.firstName + \" \" + patient.lastName}\r\n              </p>\r\n\r\n              <img\r\n                src={patient.img}\r\n                style={{\r\n                  marginTop: 2 + \"%\",\r\n                  marginBottom: 0,\r\n                  width: 4 + \"%\",\r\n                  height: 4 + \"%\",\r\n                  left: patient.left + \"%\",\r\n                  right: patient.right + \"%\",\r\n                  top: patient.top + \"%\",\r\n                  // bottom: patient.bottom + \"%\",\r\n\r\n                  position: \"absolute\",\r\n                }}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <table className=\"grid\">\r\n          {/* this is the note displayed above the map on the right side */}\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <img src={green} alt=\"circle\" className=\"note\" />\r\n              </td>\r\n              <td>\r\n                <p className=\"txt\">Low stress level</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <img src={yellow} alt=\"triangle\" className=\"note\" />\r\n              </td>\r\n              <td>\r\n                <p className=\"txt\">Medium stress level</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <img src={red} alt=\"star\" className=\"note\" />\r\n              </td>\r\n              <td>\r\n                <p className=\"txt\">High stress level</p>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.showPanel ? (\r\n          <MDBContainer className=\"panel\">\r\n            <MDBCard>\r\n              <MDBCardHeader className=\"panelHeader\">\r\n                <p> Patient Id: {this.state.currentId}</p>\r\n                <p> Name: {this.state.currentName}</p>\r\n              </MDBCardHeader>\r\n              <MDBCardBody className=\"panelBody\">\r\n                <MDBCardText>\r\n                  <img src={heart_red} />\r\n                  Heart Rate: {this.state.currentHeartRate}\r\n                </MDBCardText>\r\n                <MDBCardText\r\n                  className=\"pInfo\"\r\n                  onClick={this.handleSubmit(this.state.currentId)}\r\n                >\r\n                  <img src={info_black} />\r\n                  View Patient Info\r\n                </MDBCardText>\r\n                <MDBCardText className=\"pLocation\">\r\n                  <img src={location_black} />\r\n                  View Location Details\r\n                </MDBCardText>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBContainer>\r\n        ) : (\r\n          <p></p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Location;\r\n","import React, { Component } from \"react\";\r\nimport \"./DetailedPatientInfo.css\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst api = \"https://lachesisfitbit.com/api/getbyid=\";\r\nconst apiHeartRateList = \"https://lachesisfitbit.com/api/getAllActivebypid=\";\r\n\r\nclass DetailedPatientInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //variable for list of patients and the specific patient\r\n  state = {\r\n    patients: [],\r\n    patient: [\r\n      {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        dobmonth: \"\",\r\n        dobday: \"\",\r\n        dobyear: \"\",\r\n      },\r\n    ],\r\n    heartRates: [],\r\n    heartRate: [],\r\n    stressLevel: [],\r\n    time: [\"0 sec\"],\r\n  };\r\n\r\n  //function that retrieves data from backend server using RESTful API every time user opens this page\r\n  //The retrieved data is saved to the variable \"patients\"\r\n  componentDidMount() {\r\n    const { patientId } = this.props.match.params;\r\n    axios\r\n      .get(api + patientId)\r\n      .then((response) => response.data)\r\n      .then((result) => {\r\n        this.setState({ patients: result });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    this.getHeartRate(patientId);\r\n    //5000\r\n    this.timer = setInterval(() => this.getHeartRate(patientId), 500000);\r\n  }\r\n\r\n  // function handleSubmit(event) {\r\n  //   event.preventDefault();\r\n  // }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  }\r\n  getHeartRate(patientId) {\r\n    console.log(apiHeartRateList + patientId);\r\n    axios\r\n      .get(apiHeartRateList + patientId)\r\n      .then((response) => response.data)\r\n      .then((result) => {\r\n        this.setState({ heartRates: result });\r\n        for (let i = 0; i < this.state.heartRates.length; i++) {\r\n          this.setState((state) => {\r\n            let heartRate = state.heartRate;\r\n            let time = state.time;\r\n            let stressLevel = state.stressLevel;\r\n            heartRate = heartRate.concat(this.state.heartRates[i].heartrate);\r\n            time = time.concat((i + 1) * 5);\r\n            stressLevel = stressLevel.concat(\r\n              (this.state.heartRates[i].heartrate + this.state.time[i] / 12) / 2\r\n            );\r\n            return {\r\n              heartRate,\r\n              stressLevel,\r\n              time,\r\n            };\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"line 80: \" + this.state.heartRates[0].fid);\r\n    //if the patientId in patientsList matches with the patientId parameter from url, save the info in patient variable.\r\n    {\r\n      if (\r\n        this.props.match.params.patientId !== undefined &&\r\n        this.state.patients.pid !== undefined\r\n      ) {\r\n        if (\r\n          this.state.patients.pid.toString() ===\r\n          this.props.match.params.patientId.toString()\r\n        ) {\r\n          console.log(\"pid match\");\r\n          //this.setState({ firstName: this.state.patients.firstName });\r\n          this.state.patient.firstName = this.state.patients.firstName;\r\n          this.state.patient.lastName = this.state.patients.lastName;\r\n          this.state.patient.dobmonth = this.state.patients.dobmonth;\r\n          this.state.patient.dobday = this.state.patients.dobday;\r\n          this.state.patient.dobyear = this.state.patients.dobyear;\r\n        } else console.log(\"pid fail\");\r\n      }\r\n    }\r\n\r\n    const info = {\r\n      labels: this.state.time,\r\n      datasets: [\r\n        {\r\n          label: \"Heart rate(bpm)\",\r\n          backgroundColor: \"rgba(75,192,192,1)\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 0.3,\r\n          data: this.state.heartRate,\r\n        },\r\n        {\r\n          label: \"Stress level(sl)\",\r\n          backgroundColor: \"rgba(255, 246, 143, 1)\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 0.3,\r\n          data: this.state.stressLevel,\r\n        },\r\n      ],\r\n    };\r\n\r\n    //graph format for waiting time\r\n    const room = {\r\n      labels: [\r\n        \"Waiting\",\r\n        \"Exam 1\",\r\n        \"Exam 2\",\r\n        \"Exam 3\",\r\n        \"Exam 4\",\r\n        \"Exam 5\",\r\n        \"LA1\",\r\n        \"LA2\",\r\n        \"LA3\",\r\n        \"LA4\",\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"Waiting time (min)\",\r\n          backgroundColor: \"rgba(190, 144, 212,1)\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 1,\r\n          data: [12, 10, 6.5, 3, 0, 7],\r\n        },\r\n      ],\r\n    };\r\n    return (\r\n      <div className=\"DetailedInfo\">\r\n        <div className=\"basic\">\r\n          <h1 className=\"name\">\r\n            {this.state.patient.firstName + \" \"}\r\n            {this.state.patient.lastName}\r\n          </h1>\r\n          <p>\r\n            DOB:{\" \"}\r\n            {this.state.patient.dobmonth +\r\n              \"/\" +\r\n              this.state.patient.dobday +\r\n              \"/\" +\r\n              this.state.patient.dobyear}\r\n          </p>\r\n          <p>Sex: Male</p>\r\n          <p>Heart rate: 118 bpm</p>\r\n          <p>Stress level: 89 sl</p>\r\n          <p>Waiting time: 25 minutes 13 seconds</p>\r\n        </div>\r\n        <Bar\r\n          className=\"heart_rate_chart\"\r\n          data={info}\r\n          width={60}\r\n          height={30}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Heart Rate & Stress Level\",\r\n              fontSize: 20,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"bottom\",\r\n            },\r\n          }}\r\n        />\r\n        <p className=\"break\"></p>\r\n        <Bar\r\n          className=\"room_chart\"\r\n          data={room}\r\n          width={60}\r\n          height={30}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Time Spent at Each Room\",\r\n              fontSize: 20,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"bottom\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DetailedPatientInfo;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./PatientList.css\";\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n//const api = \"https://lachesisfitbit.com/api/getbyid=1\";\r\nconst apiAll = \"https://lachesisfitbit.com/api/getAllPatients\";\r\nconst apiUpdate = \"https://lachesisfitbit.com/api/updateConnect\";\r\nconst apiActive = \"https://lachesisfitbit.com/api/getActivePatients\";\r\nconst apiSignOff = \"https://lachesisfitbit.com/api/SignOffBypid=\";\r\n\r\n//const\r\n\r\nclass PatientList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //variable for list of patients\r\n  state = {\r\n    patients: [],\r\n  };\r\n\r\n  //function that retrieves data from backend server using RESTful API every time user opens this page\r\n  //The retrieved data is saved to the variable \"patients\"\r\n  componentDidMount() {\r\n    axios\r\n      .get(apiActive)\r\n      .then((response) => response.data)\r\n      .then((result) => {\r\n        this.setState({ patients: result });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  //redirect the user to the \"DetailedPatientInfo\" page for the patient clicked, and pass patient id as parameter in url.\r\n  handleSubmit = (param) => (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: \"/detailed_patient_info/\" + param,\r\n      data: param,\r\n    });\r\n  };\r\n\r\n  removePatient = (param) => (e) => {\r\n    e.preventDefault();\r\n    //delete patient from the list\r\n\r\n    // axios\r\n    //   .post(apiSignOff + param, {\r\n    //     headers: { \"Content-Type\": \"application/json\" },\r\n    //   })\r\n    //   .then((response) => console.log(response))\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify(\"\");\r\n    console.log(raw);\r\n\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    //send new patient data to backend\r\n    fetch(apiSignOff + param, requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    alert(\"The patient is successfully removed from the list.\");\r\n    window.location.reload(false);\r\n\r\n    // this.props.history.push({\r\n    //   pathname: \"/patient_list\",\r\n    //   data: param,\r\n    // });\r\n  };\r\n\r\n  render() {\r\n    const test = window.$test;\r\n    console.log(\"global\" + { test }[0]);\r\n    return (\r\n      <div className=\"list\">\r\n        <table id=\"tableInfo\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Name</th>\r\n              <th>Waiting Time</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.patients.map((patient) => (\r\n              <tr key={patient.pid}>\r\n                <td>{patient.pid}</td>\r\n                <td>\r\n                  <div onClick={this.handleSubmit(patient.pid)}>\r\n                    {patient.firstName + \" \"}\r\n                    {patient.lastName}\r\n                  </div>\r\n\r\n                  <button\r\n                    className=\"remove\"\r\n                    onClick={this.removePatient(patient.pid)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </td>\r\n                <td onClick={this.handleSubmit(patient.pid)}>25 min 13 sec</td>\r\n              </tr>\r\n            ))}\r\n            {/* <tr>\r\n              <td>2</td>\r\n              <td onClick={this.handleSubmit}>William Smith</td>\r\n              <td>25 min 13 sec</td>\r\n            </tr>\r\n            <tr>\r\n              <td>3</td>\r\n              <td onClick={this.handleSubmit}>Jennifer Johnson</td>\r\n              <td>20 min 3 sec</td>\r\n            </tr> */}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PatientList;\r\n","import React, { useState } from \"react\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"./AddPatient.css\";\r\nimport axios from \"axios\";\r\nconst test = window.$test;\r\n\r\nconst api = \"https://lachesisfitbit.com/api/uploadPatientsByJSON\";\r\n//const apiConnect = \"https://lachesisfitbit.com/api/uploadConnectById\";\r\nconst newApi = \"https://lachesisfitbit.com/api/inputBindingByJSON\";\r\n\r\nexport default function AddPatient(props) {\r\n  const [first, setFirst] = useState();\r\n  const [middle, setMiddle] = useState();\r\n  const [last, setLast] = useState();\r\n  const [month, setMonth] = useState();\r\n  const [day, setDay] = useState();\r\n  const [year, setYear] = useState();\r\n  const [phoneNumber, setNumber] = useState();\r\n  const [sex = \"Female\", setSex] = useState();\r\n  const [weight, setWeight] = useState();\r\n  const [height, setHeight] = useState();\r\n  const [fid, setFid] = useState();\r\n  const [start, setStart] = useState();\r\n  const [finish, setFinish] = useState();\r\n\r\n  let gender;\r\n\r\n  //validate input information. If user input is not valid, prompt error message.\r\n  //Otherwise, prompt success message and redirect the user to menu page.\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const errors = [];\r\n    if (first === undefined || first.length === 0) {\r\n      errors.push(\"First name is required\");\r\n    }\r\n    if (last === undefined || last.length === 0) {\r\n      errors.push(\"Last name is required\");\r\n    }\r\n    if (sex === undefined || sex.length === 0) {\r\n      errors.push(\"Sex is required\");\r\n    }\r\n    if (month === undefined || month > 12 || month < 1 || isNaN(month)) {\r\n      errors.push(\"Month is not valid\");\r\n    }\r\n    if (day === undefined || day > 31 || day < 1 || isNaN(day)) {\r\n      errors.push(\"Day is not valid\");\r\n    }\r\n    if (year === undefined || year > 2020 || year < 1 || isNaN(year)) {\r\n      errors.push(\"Year is not valid\");\r\n    }\r\n    if (weight === undefined || weight <= 0 || isNaN(weight)) {\r\n      errors.push(\"Weight is not valid\");\r\n    }\r\n    if (height === undefined || height <= 0 || isNaN(height)) {\r\n      errors.push(\"Height is not valid\");\r\n    }\r\n    if (phoneNumber === undefined || phoneNumber.length === 0) {\r\n      errors.push(\"Phone number is required\");\r\n    }\r\n    if (fid === undefined || fid.length === 0) {\r\n      errors.push(\"Fitbit ID is required\");\r\n    }\r\n    if (errors.length > 0) alert(errors);\r\n    else {\r\n      alert(\r\n        \"New patient \" +\r\n          first +\r\n          \" \" +\r\n          middle +\r\n          \" \" +\r\n          last +\r\n          \" (\" +\r\n          sex +\r\n          \", \" +\r\n          weight +\r\n          \" lbs, \" +\r\n          height +\r\n          \" ft, \" +\r\n          day +\r\n          \"/\" +\r\n          month +\r\n          \"/\" +\r\n          year +\r\n          \", \" +\r\n          phoneNumber +\r\n          \", \" +\r\n          fid +\r\n          \") is added to the system.\"\r\n      );\r\n      props.history.push(\"/menu\");\r\n    }\r\n\r\n    gender = sex === \"Female\" ? 0 : 1;\r\n\r\n    const date = new Date();\r\n\r\n    const patient = {\r\n      fid: fid,\r\n      mid: phoneNumber,\r\n      dobyear: year,\r\n      dobmonth: month,\r\n      dobday: day,\r\n      firstName: first,\r\n      middleName: middle,\r\n      lastName: last,\r\n      weight: weight,\r\n      height: height,\r\n      gender: gender,\r\n      start: date,\r\n    };\r\n\r\n    // const connect = {\r\n    //   fid: fid,\r\n    //   pid: 1,\r\n    //   matchId: phoneNumber.substring(phoneNumber.length - 4),\r\n    //   //get current time\r\n    //   start: date,\r\n    //   finish: finish,\r\n    // };\r\n\r\n    console.log(patient);\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify(patient);\r\n    console.log(raw);\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    //send new patient data to backend\r\n    fetch(newApi, requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    //returned data: {\"matchid\":14,\"pid\":1,\"fid\":2,\"start\":\"2020-05-01T07:04:07.579+0000\",\"finish\":null}\r\n\r\n    //setTime(connect);\r\n  }\r\n\r\n  //bind mobile ID and fitbit ID with patient\r\n  // function setTime(connect) {\r\n  //   const myHeaders = new Headers();\r\n  //   myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  //   const raw = JSON.stringify(connect);\r\n  //   console.log(\"content\" + raw);\r\n\r\n  //   const requestOptions = {\r\n  //     method: \"POST\",\r\n  //     headers: myHeaders,\r\n  //     body: raw,\r\n  //     redirect: \"follow\",\r\n  //   };\r\n\r\n  //   fetch(apiConnect, requestOptions)\r\n  //     .then((response) => response.text())\r\n  //     .then((result) => console.log(result))\r\n  //     .catch((error) => console.log(\"error\", error));\r\n  // }\r\n\r\n  return (\r\n    <div className=\"info\">\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>New Patient Form </h1>\r\n        <table id=\"form_table\">\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <p>First Name:</p>\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <p>Middle Name:</p>\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <p>Last Name:</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"longInput\"\r\n                  onChange={(e) => setFirst(e.target.value)}\r\n                />\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"longInput\"\r\n                  onChange={(e) => setMiddle(e.target.value)}\r\n                />\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"longInput\"\r\n                  onChange={(e) => setLast(e.target.value)}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"6\">\r\n                <p>Sex:</p>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td colSpan=\"6\">\r\n                <select value={sex} onChange={(e) => setSex(e.target.value)}>\r\n                  <option value=\"Female\">Female</option>\r\n                  <option value=\"Male\">Male</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\">\r\n                <p>Weight:</p>\r\n              </td>\r\n              <td colSpan=\"3\">\r\n                <p>Height:</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"weight\"\r\n                  onChange={(e) => setWeight(e.target.value)}\r\n                />\r\n                lbs.\r\n              </td>\r\n              <td colSpan=\"3\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"height\"\r\n                  onChange={(e) => setHeight(e.target.value)}\r\n                />\r\n                ft/in\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"6\">\r\n                <p>Date of Birth:</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <label className=\"month\">MM</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"(1-12)\"\r\n                  className=\"dob\"\r\n                  onChange={(e) => setMonth(e.target.value)}\r\n                />\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <label className=\"day\">DD</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"(1-31)\"\r\n                  className=\"dob\"\r\n                  onChange={(e) => setDay(e.target.value)}\r\n                />\r\n              </td>\r\n              <td colSpan=\"2\">\r\n                <label className=\"year\">YYYY</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"(1900-2020)\"\r\n                  className=\"dob\"\r\n                  onChange={(e) => setYear(e.target.value)}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\">\r\n                <p>Cell Phone Number:</p>\r\n              </td>\r\n              <td colSpan=\"3\">\r\n                <p>Fitbit Device ID:</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\">\r\n                <Input\r\n                  className=\"phone\"\r\n                  country=\"US\"\r\n                  value={phoneNumber}\r\n                  onChange={setNumber}\r\n                />\r\n              </td>\r\n              <td colSpan=\"3\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"fID\"\r\n                  onChange={(e) => setFid(e.target.value)}\r\n                />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <input type=\"submit\" value=\"Submit\" className=\"submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n//import { Auth }, FormGroup, FormControl, ControlLabel  from \"aws-amplify\";\r\nimport \"./Feedback.css\";\r\n\r\nexport default function Feedback(props) {\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  function validateForm() {\r\n    return feedback.length > 0;\r\n  }\r\n\r\n  //After user fills out feedback, prompt the message and redirect the user to menu page.\r\n  //Need to work on saving feedback to database.\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (feedback === undefined || feedback.length === 0)\r\n      alert(\"ERROR: Feedback is empty\");\r\n    else {\r\n      alert(\"Your feedback is submitted successfully. Thank you.\");\r\n      props.history.push(\"/menu\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Feedback\">\r\n      <form onSubmit={handleSubmit}>\r\n        <table className=\"tableInput\">\r\n          <tbody>\r\n            <tr>\r\n              <td>Describe Feedback.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <textarea\r\n                  className=\"input\"\r\n                  type=\"content\"\r\n                  value={feedback}\r\n                  onChange={(e) => setFeedback(e.target.value)}\r\n                ></textarea>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\r\n          Submit Feedback Form\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst heartRateApi = \"https://lachesisfitbit.com/api/recentFitbit=\";\r\nconst apiActive = \"https://lachesisfitbit.com/api/getActivePatients\";\r\nconst locationApi = \"https://lachesisfitbit.com/api/getbylid=\";\r\n\r\n// /getAllbyfid=1\r\n// /recentFitbit=1\r\n// /updateConnect\r\n// return class from binding is patients_fitbit connection\r\n// /getActivePatients\r\n\r\nclass Test extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.handleSubmit = this.handleSubmit.bind(this);\r\n    //this.openPanel = this.openPanel.bind(this);\r\n  }\r\n\r\n  //variable for list of patients\r\n  state = {\r\n    heartRate: [],\r\n    patients: [],\r\n    location: [],\r\n  };\r\n\r\n  //function that retrieves data from backend server using RESTful API every time user opens this page\r\n  //The retrieved data is saved to the variable \"patients\"\r\n  componentDidMount() {\r\n    // proxyurl = window.$proxyurl;\r\n    // api = window.$api;\r\n    this.getPatients();\r\n    //5000\r\n    this.timer = setInterval(() => this.getPatients(), 5000000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  }\r\n\r\n  getPatients() {\r\n    //fetch heartrate data from fitbit device 1, 2, 3\r\n    // for (let i = 1; i < 4; i++) {\r\n    //   axios\r\n    //     .get(heartRateApi + i.toString())\r\n    //     .then((response) => response.data)\r\n    //     .then((result) => {\r\n    //       this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n    //       console.log(this.state.heartRate);\r\n    //     })\r\n\r\n    //     .catch((error) => console.log(\"error\", error));\r\n    // }\r\n    axios\r\n      .get(apiActive)\r\n      .then((response) => response.data)\r\n      .then((result) => {\r\n        this.setState({ patients: result });\r\n        console.log(\"patients\" + this.state.patients);\r\n        for (let i = 1; i <= this.state.patients.length; i++) {\r\n          axios\r\n            .get(heartRateApi + i.toString())\r\n            .then((response) => response.data)\r\n            .then((result) => {\r\n              console.log(result);\r\n              this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n              console.log(\"result\" + this.state.heartRate[i - 1].heartrate);\r\n              this.setState((state) => {\r\n                const patients = state.patients;\r\n                patients[i - 1].heartRate = this.state.heartRate[\r\n                  i - 1\r\n                ].heartrate;\r\n                return {\r\n                  patients,\r\n                };\r\n              });\r\n              console.log(\"test\" + this.state.patients);\r\n            })\r\n\r\n            .catch((error) => console.log(\"error\", error));\r\n\r\n          axios\r\n            .get(locationApi + i.toString())\r\n            .then((response) => response.data)\r\n            .then((result) => {\r\n              console.log(result);\r\n              this.setState({ location: this.state.location.concat(result) });\r\n              console.log(\"result\" + this.state.location[i - 1].location);\r\n              this.setState((state) => {\r\n                const patients = state.patients;\r\n                patients[i - 1].location = this.state.location[i - 1].location;\r\n                return {\r\n                  patients,\r\n                };\r\n              });\r\n            })\r\n\r\n            .catch((error) => console.log(\"error\", error));\r\n        }\r\n      })\r\n\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    // axios\r\n    //   .get(heartRateApi + \"2\")\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n    //     console.log(\"pid 2 Heartrate:\" + this.state.heartRate.heartrate);\r\n    //   })\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n    // axios\r\n    //   .get(heartRateApi + \"3\")\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ heartRate: this.state.heartRate.concat(result) });\r\n    //     console.log(\"pid 3 Heartrate:\" + this.state.heartRate.heartrate);\r\n    //   })\r\n\r\n    //   .catch((error) => console.log(\"error\", error));\r\n\r\n    //fetch patient list\r\n    // axios\r\n    //   .get(apiAll)\r\n    //   .then((response) => response.data)\r\n    //   .then((result) => {\r\n    //     this.setState({ patients: result });\r\n    //     console.log(this.state.patients[0]);\r\n    //     //for (let i = 0; i < this.state.patients.length; i++) {\r\n    //     for (let i = 0; i < 3; i++) {\r\n    //       this.setState((state) => {\r\n    //         const patients = state.patients;\r\n    //         patients[i].stressLevel = 70;\r\n    //         patients[i].heartRate = this.state.heartRate[i].heartrate;\r\n    //         patients[i].img = green;\r\n    //         patients[i].location = this.state.location[i].location;\r\n    //         console.log(\"patient heart rate updated:\" + patients[i].heartRate);\r\n    //         if (patients[i].location === \"RoomA\") {\r\n    //           patients[i].left = 57;\r\n    //           patients[i].right = 44;\r\n    //           patients[i].top = 120;\r\n    //           // patients[i].bottom = 32;\r\n    //           //145\r\n    //         }\r\n    //         if (patients[i].location === \"RoomB\") {\r\n    //           patients[i].left = 62;\r\n    //           patients[i].right = 39;\r\n    //           patients[i].top = 120;\r\n    //           // patients[i].bottom = 32;\r\n    //         }\r\n    //         if (patients[i].location === \"Roomc\") {\r\n    //           patients[i].left = 58;\r\n    //           patients[i].right = 43;\r\n    //           patients[i].top = 100;\r\n    //           // patients[i].bottom = 58;\r\n    //         }\r\n    //         return {\r\n    //           patients,\r\n    //         };\r\n    //       });\r\n    //     }\r\n    //     console.log(this.state.patients);\r\n\r\n    //set the color/shape based on the stress level of the patients in the list\r\n    //         for (let i = 0; i < this.state.patients.length; i++) {\r\n    //           if (this.state.patients[i].heartRate <= 70)\r\n    //             this.setState((state) => {\r\n    //               const patients = state.patients;\r\n    //               patients[i].img = green;\r\n    //               return {\r\n    //                 patients,\r\n    //               };\r\n    //             });\r\n    //           else if (this.state.patients[i].heartRate <= 85)\r\n    //             this.setState((state) => {\r\n    //               const patients = state.patients;\r\n    //               patients[i].img = yellow;\r\n    //               return {\r\n    //                 patients,\r\n    //               };\r\n    //             });\r\n    //           else if (this.state.patients[i].heartRate >= 85)\r\n    //             this.setState((state) => {\r\n    //               const patients = state.patients;\r\n    //               patients[i].img = red;\r\n    //               return {\r\n    //                 patients,\r\n    //               };\r\n    //             });\r\n    //         }\r\n    //       })\r\n    //       .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  //redirect the user to the \"DetailedPatientInfo\" page for the patient clicked, and pass patient id as parameter in url.\r\n  //   handleSubmit = (param) => (e) => {\r\n  //     e.preventDefault();\r\n  //     this.props.history.push({\r\n  //       pathname: \"/detailed_patient_info/\" + param,\r\n  //       data: this.state.patients,\r\n  //     });\r\n  //   };\r\n\r\n  //   openPanel = (param) => (e) => {\r\n  //     e.preventDefault();\r\n  //     this.setState({ showPanel: true });\r\n  //     this.setState({ currentId: param });\r\n  //     for (let i = 0; i < this.state.patients.length; i++) {\r\n  //       if (this.state.patients[i].pid === param) {\r\n  //         this.setState({\r\n  //           currentName:\r\n  //             this.state.patients[i].firstName +\r\n  //             \" \" +\r\n  //             this.state.patients[i].lastName,\r\n  //         });\r\n  //         this.setState({\r\n  //           currentHeartRate: this.state.patients[i].heartRate,\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Test\">\r\n        <h1 className=\"header\">Patient Location</h1>\r\n        <div className=\"dot\">\r\n          {this.state.patients.map((patient) => (\r\n            <div key={patient.pid} className=\"patientLocation\">\r\n              <p className=\"heartRateText\">{patient.heartRate + \"bpm\"}</p>\r\n              <p>{patient.firstName + patient.lastName}</p>\r\n              <p>{patient.location}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {/* <img src={map} alt=\"Map\" className=\"map\" />\r\n        <div className=\"dot\">\r\n          {this.state.patients.map((patient) => (\r\n            <div\r\n              key={patient.pid}\r\n              className=\"patientLocation\"\r\n              onClick={this.openPanel(patient.pid)}\r\n            >\r\n              <p\r\n                className=\"heartRateText\"\r\n                style={{\r\n                  left: patient.left + \"%\",\r\n                  right: patient.right + \"%\",\r\n                  top: patient.top - 2 + \"%\",\r\n                  // bottom: patient.bottom + \"%\",\r\n                  position: \"absolute\",\r\n                }}\r\n              >\r\n                {patient.heartRate + \"bpm\"}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Test;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./containers/Menu\";\r\nimport Login from \"./containers/Login\";\r\nimport SignUp from \"./containers/SignUp\";\r\nimport NotFound from \"./containers/NotFound\";\r\nimport Menu from \"./containers/Menu\";\r\nimport Location from \"./containers/Location\";\r\nimport DetaildPatientInfo from \"./containers/DetailedPatientInfo\";\r\nimport PatientList from \"./containers/PatientList\";\r\nimport AddPatient from \"./containers/AddPatient\";\r\nimport Feedback from \"./containers/Feedback\";\r\nimport Test from \"./containers/Test\";\r\n\r\nexport default function Routes() {\r\n  return (\r\n    /* Set up paths for pages */\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/login\" exact component={Login} />\r\n      <Route path=\"/signup\" exact component={SignUp} />\r\n      <Route path=\"/menu\" exact component={Menu} />\r\n      <Route path=\"/location\" exact component={Location} />\r\n      <Route path=\"/test\" exact component={Test} />\r\n      <Route\r\n        path=\"/detailed_patient_info/:patientId\"\r\n        component={DetaildPatientInfo}\r\n      />\r\n      <Route path=\"/patient_list\" exact component={PatientList} />\r\n      <Route path=\"/add_patient\" exact component={AddPatient} />\r\n      <Route path=\"/feedback\" exact component={Feedback} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n}\r\n","import React, { Component, useState } from \"react\";\r\nimport Routes from \"./Routes\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport {\r\n  Nav,\r\n  Navbar,\r\n  NavDropdown,\r\n  NavItem,\r\n  Badge,\r\n  Dropdown,\r\n} from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n//import Dropdown from \"react-dropdown\";\r\nimport \"./App.css\";\r\nimport notification from \"./containers/images/SVG/notification.svg\";\r\nimport Bullet from \"./containers/images/SVG/notification_bullet.svg\";\r\n\r\n// import Dropdown from \"react-bootstrap/Dropdown\";\r\nconst removed = [];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.goToPatient = this.goToPatient.bind(this);\r\n    this.removeAlert = this.removeAlert.bind(this);\r\n  }\r\n\r\n  state = {\r\n    patientsList: [],\r\n    alertMessageList: [\r\n      { pid: 1, name: \"Viktor Jin\", time: \"40 min \", stressLevel: \"80 sl\" },\r\n      { pid: 2, name: \"William Smith\", time: \"35 min\", stressLevel: \"78 sl\" },\r\n      {\r\n        pid: 3,\r\n        name: \"Jennifer Johnson\",\r\n        time: \"33 min\",\r\n        stressLevel: \"67 sl\",\r\n      },\r\n    ],\r\n    showAlert: false,\r\n    showOptions: false,\r\n  };\r\n\r\n  goToPatient = (param) => (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push({\r\n      pathname: \"/detailed_patient_info/\" + param,\r\n    });\r\n  };\r\n\r\n  removeAlert = (param) => (e) => {\r\n    e.preventDefault();\r\n    this.setState((prevState) => ({\r\n      alertMessageList: prevState.alertMessageList.filter(\r\n        (message) => message.pid !== param\r\n      ),\r\n    }));\r\n    removed.push(param);\r\n  };\r\n\r\n  render() {\r\n    //const test = window.$test;\r\n\r\n    console.log(\"list\" + removed);\r\n    //console.log({ test });\r\n    return (\r\n      /* The content on the App files applies to all pages of the webste */\r\n      <div className=\"App container\" style={{ minWidth: 500 }}>\r\n        {/* Website Header */}\r\n        <p className=\"bigHeading\">UCI Medical Center</p>\r\n        <p className=\"smallHeading\">Radiology Oncology</p>\r\n        {/* Navigation Bar */}\r\n        <Navbar fluid collapseOnSelect>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Header>\r\n            <Navbar.Brand>\r\n              <Link to=\"/menu\">Menu</Link>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <NavDropdown\r\n                title={\r\n                  <img src={notification} className=\"notification_image\" />\r\n                }\r\n                noCaret\r\n                id=\"dropdown-no-caret\"\r\n              >\r\n                <div\r\n                  className=\"test1\"\r\n                  style={{\r\n                    marginTop: \"20px\",\r\n                  }}\r\n                >\r\n                  {this.state.alertMessageList.map((message) => (\r\n                    <div key={message.pid} className=\"messageTest\">\r\n                      {\" \"}\r\n                      <table className=\"dropdownMessage\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"messageLength\">\r\n                              <img\r\n                                src={Bullet}\r\n                                className=\"notification_bullet\"\r\n                              />\r\n\r\n                              {message.name +\r\n                                \", \" +\r\n                                message.time +\r\n                                \", \" +\r\n                                message.stressLevel}\r\n                            </td>\r\n                            <td>\r\n                              <Dropdown drop=\"right\" id=\"message\">\r\n                                <Dropdown.Toggle\r\n                                  style={{ float: \"right\" }}\r\n                                ></Dropdown.Toggle>\r\n\r\n                                <Dropdown.Menu id=\"dropdownOption\">\r\n                                  <a\r\n                                    href=\"\"\r\n                                    onClick={this.removeAlert(message.pid)}\r\n                                  >\r\n                                    <p>Remove alert &nbsp;&nbsp;&nbsp; x </p>\r\n                                  </a>\r\n                                  <a\r\n                                    href=\"\"\r\n                                    onClick={this.goToPatient(message.pid)}\r\n                                  >\r\n                                    <p>See patient info</p>\r\n                                  </a>\r\n                                </Dropdown.Menu>\r\n                              </Dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </NavDropdown>\r\n              <Badge variant=\"secondary\" className=\"newAlert\">\r\n                {this.state.alertMessageList.length}\r\n              </Badge>\r\n            </Navbar.Brand>\r\n          </Navbar.Header>\r\n\r\n          <Navbar.Collapse>\r\n            <Nav pullRight>\r\n              <LinkContainer to=\"/signup\">\r\n                <NavItem>Signup</NavItem>\r\n              </LinkContainer>\r\n              <LinkContainer to=\"/login\">\r\n                <NavItem>Login</NavItem>\r\n              </LinkContainer>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Routes />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nwindow.$test = \"try\"; //global variable\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}